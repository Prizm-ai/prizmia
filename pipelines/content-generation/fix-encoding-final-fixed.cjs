/**
 * Script de correction finale de l'encodage UTF-8
 * Corrige tous les caract√®res corrompus dans les articles publi√©s
 * Version corrig√©e - Sans emojis probl√©matiques
 */

const fs = require('fs');
const path = require('path');

const BLOG_DIR = path.join(__dirname, '..', '..', 'src', 'content', 'blog');

// Mapping des caract√®res corrompus vers les bons caract√®res
const REPLACEMENTS = {
  // Caract√®res fran√ßais
  '√É¬©': '√©',
  '√É¬®': '√®',
  '√É¬™': '√™',
  '√É ': '√†',
  '√É¬¢': '√¢',
  '√É¬¥': '√¥',
  '√É¬Æ': '√Æ',
  '√É¬Ø': '√Ø',
  '√É¬ß': '√ß',
  '√É¬π': '√π',
  '√É¬ª': '√ª',
  '√É¬º': '√º',
  '√É¬∂': '√∂',
  '√É¬´': '√´',
  '√É‚Ç¨': '√Ä',
  '√É‚Ä∞': '√â',
  '√ÉÀÜ': '√à',
  '√É‚Ä°': '√á',
  '√Ö"': '≈ì',
  '√É"': '≈ì',
  
  // Guillemets et apostrophes
  '√¢‚Ç¨‚Ñ¢': "'",
  '√¢‚Ç¨≈ì': '"',
  '√¢‚Ç¨': '"',
  '√¢‚Ç¨Àú': "'",
  '√Ç¬´': '¬´',
  '√Ç¬ª': '¬ª',
  
  // Tirets et espaces
  '√¢‚Ç¨"': '‚Äî',
  '√¢‚Ç¨"': '‚Äì',
  '√Ç ': ' ',
  '√¢‚Ç¨¬¶': '‚Ä¶',
  
  // Symboles
  '√¢‚Ç¨¬¢': '‚Ä¢',
  '√¢‚Äö¬¨': '‚Ç¨',
  '√Ç¬∞': '¬∞',
  '%C2%A0': ' ',
  
  // Corrections sp√©cifiques
  'L\'√É¬©quipe Prizm AI': "L'√©quipe Prizm AI",
  'L\'Acquipe Prizm AI': "L'√©quipe Prizm AI",
  'dYs?': 'üöÄ'
};

// Articles √† corriger
const ARTICLES_TO_FIX = [
  '2025-08-16-adoption-de-l-ia-dans-les-pme-francaises-etat-des-lieux.md',
  '2025-08-16-automatiser-sa-prospection-commerciale-avec-l-ia-methode-en-.md',
  '2025-08-16-chatgpt-pour-les-avocats-cas-d-usage-et-limites.md',
  '2025-08-16-creer-du-contenu-marketing-avec-l-ia-workflow-complet-et-out.md',
  '2025-08-16-ia-generative-2025-les-outils-indispensables-pour-les-pme-fr.md',
  '2025-08-16-ia-generative-pour-pme-en.md',
  '2025-08-16-implementer-chatgpt-dans-votre-service-client-guide-complet.md',
  '2025-08-16-intelligence-artificielle-et-transformation-digita.md',
  '2025-08-16-l-ia-dans-la-comptabilit-automatisation-et-gains-d.md'
];

function fixEncoding(content) {
  let fixed = content;
  
  // Appliquer tous les remplacements
  Object.entries(REPLACEMENTS).forEach(([bad, good]) => {
    const regex = new RegExp(bad.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
    fixed = fixed.replace(regex, good);
  });
  
  // Corrections sp√©cifiques pour les patterns r√©currents
  fixed = fixed
    .replace(/L['']√É¬©quipe/g, "L'√©quipe")
    .replace(/L['']Acquipe/g, "L'√©quipe")
    .replace(/m√É¬©/g, 'm√©')
    .replace(/t√É¬©/g, 't√©')
    .replace(/r√É¬©/g, 'r√©')
    .replace(/d√É¬©/g, 'd√©')
    .replace(/g√É¬©/g, 'g√©')
    .replace(/n√É¬©/g, 'n√©')
    .replace(/s√É¬©/g, 's√©')
    .replace(/l√É¬©/g, 'l√©')
    .replace(/v√É¬©/g, 'v√©')
    .replace(/p√É¬©/g, 'p√©')
    .replace(/f√É¬©/g, 'f√©')
    .replace(/b√É¬©/g, 'b√©')
    .replace(/c√É¬©/g, 'c√©');
  
  // Correction manuelle des emojis corrompus dans le frontmatter
  fixed = fixed
    .replace(/emoji:\s*"[^"]*"/g, 'emoji: "üöÄ"')  // Remplace tous les emojis corrompus par üöÄ
    .replace(/dYs\?/g, 'üöÄ');
  
  return fixed;
}

function fixArticle(fileName) {
  const filePath = path.join(BLOG_DIR, fileName);
  
  if (!fs.existsSync(filePath)) {
    console.log(`  ‚ùå Fichier non trouv√© : ${fileName}`);
    return false;
  }
  
  try {
    // Lire le contenu
    let content = fs.readFileSync(filePath, 'utf-8');
    const originalContent = content;
    
    // Corriger l'encodage
    content = fixEncoding(content);
    
    // Compter les changements
    const hasChanges = originalContent !== content;
    
    // Sauvegarder
    fs.writeFileSync(filePath, content, 'utf-8');
    
    console.log(`  ‚úÖ ${fileName}`);
    if (hasChanges) {
      console.log(`     ‚úì Caract√®res corrig√©s`);
    } else {
      console.log(`     ‚ö†Ô∏è Aucun changement d√©tect√©`);
    }
    
    return true;
    
  } catch (error) {
    console.error(`  ‚ùå Erreur sur ${fileName}: ${error.message}`);
    return false;
  }
}

// Fonction principale
function main() {
  console.log('üîß CORRECTION FINALE DE L\'ENCODAGE UTF-8');
  console.log('=' .repeat(60));
  console.log('\nüìù Traitement des articles :');
  console.log('-' .repeat(60));
  
  let success = 0;
  let failed = 0;
  
  ARTICLES_TO_FIX.forEach(article => {
    if (fixArticle(article)) {
      success++;
    } else {
      failed++;
    }
  });
  
  console.log('\n' + '=' .repeat(60));
  console.log('üìä R√âSULTAT');
  console.log('=' .repeat(60));
  console.log(`‚úÖ Articles corrig√©s : ${success}/${ARTICLES_TO_FIX.length}`);
  if (failed > 0) {
    console.log(`‚ùå √âchecs : ${failed}/${ARTICLES_TO_FIX.length}`);
  }
  
  console.log('\nüéØ Prochaine √©tape :');
  console.log('   cd ../..');
  console.log('   npm run dev');
  console.log('   # Le site devrait maintenant fonctionner !');
  console.log('\nüí° Si des probl√®mes persistent :');
  console.log('   - V√©rifier dans VS Code que les accents sont corrects');
  console.log('   - S\'assurer que le frontmatter est valide');
  console.log('   - Relancer le script si n√©cessaire');
}

// Lancer le script
if (require.main === module) {
  main();
}