// publish-factuels-final.cjs
// Script pour formater et publier les articles factuels sur le blog Prizm AI
const fs = require('fs').promises;
const path = require('path');

async function publishFactuels() {
  const FACTUELS_DIR = 'C:\\Users\\Samuel\\Documents\\prizmia\\pipelines\\content-generation\\output\\03-articles-factuels';
  const BLOG_DIR = 'C:\\Users\\Samuel\\Documents\\prizmia\\src\\content\\blog';
  
  console.log('\nüìö PUBLICATION DES ARTICLES FACTUELS SUR LE BLOG');
  console.log('='.repeat(60) + '\n');
  
  try {
    // Lister tous les articles factuels
    const files = await fs.readdir(FACTUELS_DIR);
    const articleFiles = files.filter(f => 
      f.endsWith('.md') && 
      f.includes('2025-08-16') // Articles du jour
    );
    
    console.log(`üìä Articles factuels trouv√©s : ${articleFiles.length}\n`);
    
    let published = 0;
    let skipped = 0;
    
    for (const filename of articleFiles) {
      console.log(`\nüìÑ Traitement : ${filename}`);
      
      try {
        // Lire l'article factuel
        const sourcePath = path.join(FACTUELS_DIR, filename);
        let content = await fs.readFile(sourcePath, 'utf8');
        
        // Extraire le titre du contenu (apr√®s le # principal)
        const titleMatch = content.match(/^#\s+(.+)$/m);
        if (!titleMatch) {
          console.log(`   ‚ö†Ô∏è  Pas de titre trouv√©, article ignor√©`);
          skipped++;
          continue;
        }
        
        // Nettoyer le titre (enlever les parties apr√®s |)
        const title = titleMatch[1].replace(/\|.*$/, '').trim();
        
        // D√©terminer la cat√©gorie et l'emoji selon le contenu du titre
        let category = 'actualites';
        let emoji = 'üöÄ';
        
        const titleLower = title.toLowerCase();
        
        // D√©tection de la cat√©gorie bas√©e sur le titre
        if (titleLower.includes('guide') || 
            titleLower.includes('impl√©menter') || 
            titleLower.includes('implementer') ||
            titleLower.includes('cr√©er') ||
            titleLower.includes('automatiser') ||
            titleLower.includes('m√©thode') ||
            titleLower.includes('√©tapes') ||
            titleLower.includes('workflow') ||
            titleLower.includes('comment')) {
          category = 'guides';
          emoji = 'üìö';
        } else if (titleLower.includes('analyse') || 
                   titleLower.includes('adoption') || 
                   titleLower.includes('√©tat des lieux') ||
                   titleLower.includes('tendances') ||
                   titleLower.includes('statistiques') ||
                   titleLower.includes('chiffres')) {
          category = 'analyses';
          emoji = 'üìä';
        } else if (titleLower.includes('avocat') ||
                   titleLower.includes('juridique') ||
                   titleLower.includes('droit')) {
          emoji = '‚öñÔ∏è';
          category = 'guides';
        } else if (titleLower.includes('comptabilit√©') ||
                   titleLower.includes('comptable')) {
          emoji = 'üí∞';
        } else if (titleLower.includes('prospection') ||
                   titleLower.includes('commercial') ||
                   titleLower.includes('vente')) {
          emoji = 'üìà';
          category = 'guides';
        } else if (titleLower.includes('r√©glementation') ||
                   titleLower.includes('conformit√©') ||
                   titleLower.includes('rgpd')) {
          emoji = 'üìã';
        } else if (titleLower.includes('comparatif') ||
                   titleLower.includes('versus') ||
                   titleLower.includes(' vs ')) {
          emoji = '‚öîÔ∏è';
        } else if (titleLower.includes('cybers√©curit√©') ||
                   titleLower.includes('s√©curit√©')) {
          emoji = 'üîí';
          category = 'analyses';
        }
        
        // G√©n√©rer une description bas√©e sur le titre et la cat√©gorie
        let description = '';
        if (category === 'guides') {
          description = `Guide pratique pour les PME et ETI : ${title.substring(0, 100)}`;
        } else if (category === 'analyses') {
          description = `Analyse approfondie : ${title.substring(0, 120)}`;
        } else {
          description = `Actualit√© IA pour les entreprises : ${title.substring(0, 110)}`;
        }
        
        // Si la description est trop longue, la tronquer proprement
        if (description.length > 155) {
          description = description.substring(0, 152) + '...';
        }
        
        // Calculer le temps de lecture (250 mots par minute)
        const wordCount = content.split(/\s+/).length;
        const readingTime = Math.max(1, Math.ceil(wordCount / 250));
        
        // Cr√©er le frontmatter au format exact attendu par Astro
        const frontmatter = `---
title: "${title}"
description: "${description}"
pubDate: 2025-08-16
author: "L'√©quipe Prizm AI"
emoji: "${emoji}"
category: "${category}"
featured: false
readingTime: "${readingTime} min"
---

`;
        
        // Assembler l'article final
        const finalContent = frontmatter + content;
        
        // Cr√©er le nom de fichier pour le blog
        // Nettoyer le titre pour en faire un slug
        const slug = title.toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '') // Enlever les accents
          .replace(/[^a-z0-9]+/g, '-')     // Remplacer les caract√®res sp√©ciaux par -
          .replace(/^-+|-+$/g, '')         // Enlever les - au d√©but et √† la fin
          .substring(0, 60);                // Limiter la longueur
        
        const blogFilename = `2025-08-16-${slug}.md`;
        const blogPath = path.join(BLOG_DIR, blogFilename);
        
        // V√©rifier si le fichier existe d√©j√†
        try {
          await fs.access(blogPath);
          console.log(`   ‚è≠Ô∏è  Fichier d√©j√† existant, ignor√©`);
          skipped++;
          continue;
        } catch {
          // Le fichier n'existe pas, on peut continuer
        }
        
        // Sauvegarder dans le blog
        await fs.writeFile(blogPath, finalContent, 'utf8');
        
        console.log(`   ‚úÖ Publi√© : ${blogFilename}`);
        console.log(`      üìÇ Cat√©gorie : ${category}`);
        console.log(`      ${emoji} Emoji : ${emoji}`);
        console.log(`      ‚è±Ô∏è  Temps de lecture : ${readingTime} min`);
        published++;
        
      } catch (error) {
        console.log(`   ‚ùå Erreur : ${error.message}`);
        skipped++;
      }
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('\nüìä R√âSUM√â :');
    console.log(`   ‚úÖ Articles publi√©s : ${published}`);
    console.log(`   ‚è≠Ô∏è  Articles ignor√©s : ${skipped}`);
    console.log(`   üìö Total sur le blog : ${published + 1} articles (avec le manifeste)`);
    
    if (published > 0) {
      console.log('\nüöÄ PROCHAINES √âTAPES :');
      console.log('\n1. Ouvrir les articles dans VS Code pour v√©rifier :');
      console.log(`   code ${BLOG_DIR}`);
      console.log('\n2. Tester localement :');
      console.log('   cd C:\\Users\\Samuel\\Documents\\prizmia');
      console.log('   npm run dev');
      console.log('   # Ouvrir http://localhost:4321/blog');
      console.log('\n3. Si tout est OK, d√©ployer :');
      console.log('   git add .');
      console.log(`   git commit -m "Ajout de ${published} articles factuels sur l'IA"`);
      console.log('   git push');
      console.log('\nüí° Note : Les caract√®res sp√©ciaux peuvent appara√Ætre mal dans PowerShell');
      console.log('   mais seront corrects dans VS Code et sur le site.');
    } else {
      console.log('\n‚ö†Ô∏è Aucun nouvel article √† publier.');
      console.log('   V√©rifiez le dossier des articles factuels.');
    }
    
  } catch (error) {
    console.error('\n‚ùå Erreur globale :', error.message);
  }
}

// Lancer le script
publishFactuels().catch(console.error);