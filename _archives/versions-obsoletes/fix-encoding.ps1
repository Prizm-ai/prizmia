# fix-encoding.ps1
# Script PowerShell pour corriger l'encodage de TOUS les fichiers

Write-Host "`nüîß CORRECTION DE L'ENCODAGE AVEC POWERSHELL" -ForegroundColor Cyan
Write-Host ("=" * 60) -ForegroundColor Cyan

# Liste des fichiers √† corriger
$files = @(
    "config\prizm-config.cjs",
    "agent-redacteur-factuel.cjs",
    "agent-veille-v5.cjs",
    "agent-style-conversationnel.cjs",
    "pipeline-v5-batch.cjs"
)

# Dictionnaire de corrections
$corrections = @{
    "√É¬©" = "√©"
    "√É¬®" = "√®"
    "√É " = "√†"
    "√É¬¢" = "√¢"
    "√É¬™" = "√™"
    "√É¬¥" = "√¥"
    "√É¬π" = "√π"
    "√É¬ª" = "√ª"
    "√É¬ß" = "√ß"
    "√É¬Æ" = "√Æ"
    "√É¬Ø" = "√Ø"
    "√É‚Ä∞" = "√â"
    "√ÉÀÜ" = "√à"
    "√É‚Ç¨" = "√Ä"
    "√É‚Ä°" = "√á"
    "√É≈†" = "√ä"
    "√É"" = "√î"
    "√É‚Äö" = "√Ç"
}

$totalFixed = 0

foreach ($file in $files) {
    Write-Host "`nüìÑ Traitement de $file..." -ForegroundColor Yellow
    
    if (Test-Path $file) {
        # Lire le fichier
        $content = Get-Content $file -Raw -Encoding Default
        $originalContent = $content
        $fixCount = 0
        
        # Appliquer toutes les corrections
        foreach ($bad in $corrections.Keys) {
            if ($content -match [regex]::Escape($bad)) {
                $occurrences = ([regex]::Matches($content, [regex]::Escape($bad))).Count
                $content = $content -replace [regex]::Escape($bad), $corrections[$bad]
                $fixCount += $occurrences
            }
        }
        
        # Si des modifications ont √©t√© faites
        if ($content -ne $originalContent) {
            # Cr√©er une sauvegarde
            $timestamp = Get-Date -Format 'yyyyMMddHHmmss'
            $backupName = "$file.backup-ps-$timestamp"
            Copy-Item $file $backupName
            Write-Host "   Sauvegarde : $backupName" -ForegroundColor Gray
            
            # √âcrire le fichier corrig√© en UTF8
            Set-Content -Path $file -Value $content -Encoding UTF8
            Write-Host "   ‚úÖ $fixCount corrections appliqu√©es" -ForegroundColor Green
            $totalFixed += $fixCount
            
            # Afficher quelques exemples
            $examples = @()
            foreach ($bad in $corrections.Keys) {
                if ($originalContent -match [regex]::Escape($bad)) {
                    $good = $corrections[$bad]
                    $examples += "$bad ‚Üí $good"
                    if ($examples.Count -ge 3) { break }
                }
            }
            if ($examples.Count -gt 0) {
                $exampleText = $examples -join ', '
                Write-Host "   Exemples : $exampleText" -ForegroundColor Cyan
            }
        }
        else {
            Write-Host "   Pas de corrections n√©cessaires" -ForegroundColor Gray
        }
    }
    else {
        Write-Host "   ‚ùå Fichier non trouv√©" -ForegroundColor Red
    }
}

Write-Host "`n" -NoNewline
Write-Host ("=" * 60) -ForegroundColor Cyan
Write-Host "`nüìä TOTAL : $totalFixed corrections appliqu√©es" -ForegroundColor Yellow

if ($totalFixed -gt 0) {
    Write-Host "`n‚úÖ Les fichiers sont maintenant correctement encod√©s !" -ForegroundColor Green
    Write-Host "`nüß™ TEST RECOMMAND√â :" -ForegroundColor Cyan
    Write-Host "1. G√©n√©rer un article de test :" -ForegroundColor White
    Write-Host "   node pipeline-v5-batch.cjs --single --titre 'Test encodage corrig√©'" -ForegroundColor Gray
    Write-Host "`n2. V√©rifier l'article :" -ForegroundColor White
    Write-Host "   type output\articles-batch-v5-ready\*.md | Select-Object -First 20" -ForegroundColor Gray
}
else {
    Write-Host "`n‚úÖ Tous les fichiers √©taient d√©j√† OK." -ForegroundColor Green
}