const fs = require('fs').promises;
const path = require('path');
const { execSync } = require('child_process');

/**
 * PRODUCTION BATCH OPTIMIS√âE - PRIZM AI
 * G√©n√®re 10 articles et les pr√©pare pour publication
 * Adapt√© au format exact du blog Astro
 * 
 * UTILISATION :
 * Sauvegarder ce fichier comme : batch-production-optimized.cjs
 * Lancer avec : node batch-production-optimized.cjs
 */

class BatchProductionOptimized {
  constructor() {
    this.baseDir = 'C:\\Users\\Samuel\\Documents\\prizmia\\pipelines\\content-generation';
    this.outputDir = path.join(this.baseDir, 'output');
    this.blogDir = 'C:\\Users\\Samuel\\Documents\\prizmia\\src\\content\\blog';
    this.stagingDir = path.join(this.baseDir, 'articles-ready-to-publish');
    
    // Configuration des articles √† g√©n√©rer
    this.articles = [
      // L'Essentiel IA (4 articles)
      {
        titre: "IA g√©n√©rative 2025 : les 5 outils indispensables pour les PME",
        category: "actualites",
        emoji: "üöÄ",
        focus: "Pr√©sentation des nouveaux outils IA accessibles aux PME avec exemples concrets d'utilisation et ROI"
      },
      {
        titre: "R√©glementation IA europ√©enne : guide de conformit√© pour PME",
        category: "actualites", 
        emoji: "üìã",
        focus: "D√©cryptage de l'AI Act et check-list de mise en conformit√© pour les entreprises fran√ßaises"
      },
      {
        titre: "Microsoft Copilot vs ChatGPT Enterprise : quel assistant IA pour votre PME ?",
        category: "actualites",
        emoji: "ü§ñ",
        focus: "Comparatif d√©taill√© avec cas d'usage, prix et recommandations selon la taille d'entreprise"
      },
      {
        titre: "L'IA dans la comptabilit√© : automatisation et gains de productivit√©",
        category: "actualites",
        emoji: "üí∞",
        focus: "Solutions IA pour automatiser la saisie comptable, la facturation et le reporting financier"
      },
      
      // Guides Pratiques (4 articles)
      {
        titre: "Impl√©menter ChatGPT dans votre service client : guide pas √† pas",
        category: "guides",
        emoji: "üí¨",
        focus: "Tutoriel complet : choix de la solution, param√©trage, formation des √©quipes et mesure du ROI"
      },
      {
        titre: "Automatiser sa prospection commerciale avec l'IA en 5 √©tapes",
        category: "guides",
        emoji: "üìà",
        focus: "M√©thode pratique pour identifier, qualifier et contacter automatiquement vos prospects"
      },
      {
        titre: "Cr√©er du contenu marketing avec l'IA : workflow complet",
        category: "guides",
        emoji: "‚úçÔ∏è",
        focus: "Process d√©taill√© pour g√©n√©rer articles, posts sociaux et newsletters avec l'IA"
      },
      {
        titre: "Calculer le ROI de l'IA : m√©thode et tableur Excel gratuit",
        category: "guides",
        emoji: "üìä",
        focus: "Framework de calcul avec exemples chiffr√©s et template t√©l√©chargeable"
      },
      
      // Analyses & D√©cryptages (2 articles)
      {
        titre: "√âtude : l'adoption de l'IA dans les PME fran√ßaises en 2025",
        category: "analyses",
        emoji: "üîç",
        focus: "Analyse des chiffres, freins √† l'adoption et opportunit√©s pour prendre de l'avance"
      },
      {
        titre: "IA et cybers√©curit√© : nouveaux risques et solutions pour les PME",
        category: "analyses",
        emoji: "üîí",
        focus: "D√©cryptage des menaces li√©es √† l'IA et guide de protection des donn√©es d'entreprise"
      }
    ];
    
    this.stats = {
      startTime: Date.now(),
      generated: 0,
      failed: 0,
      published: 0,
      results: []
    };
  }

  /**
   * M√âTHODE PRINCIPALE
   */
  async run() {
    console.log('\nüöÄ PRODUCTION BATCH OPTIMIS√âE - PRIZM AI');
    console.log('‚ïê'.repeat(60));
    console.log(`Objectif : ${this.articles.length} articles de qualit√©`);
    console.log(`Heure de d√©but : ${new Date().toLocaleTimeString('fr-FR')}\n`);
    
    // 1. Pr√©parer l'environnement
    await this.prepareEnvironment();
    
    // 2. G√©n√©rer les articles
    await this.generateArticles();
    
    // 3. Pr√©parer pour publication
    await this.prepareForPublishing();
    
    // 4. Rapport final
    await this.generateReport();
    
    return this.stats;
  }

  /**
   * PHASE 1 : PR√âPARATION
   */
  async prepareEnvironment() {
    console.log('üìÅ PR√âPARATION DE L\'ENVIRONNEMENT\n');
    
    // Cr√©er le dossier de staging
    try {
      await fs.mkdir(this.stagingDir, { recursive: true });
      console.log('   ‚úÖ Dossier de staging cr√©√©');
    } catch (e) {
      console.log('   ‚ÑπÔ∏è  Dossier de staging existant');
    }
    
    // V√©rifier le pipeline
    try {
      await fs.access(path.join(this.baseDir, 'pipeline-v4-fixed.cjs'));
      console.log('   ‚úÖ Pipeline v4 disponible');
    } catch (e) {
      throw new Error('Pipeline v4 non trouv√© !');
    }
    
    // Nettoyer les anciens fichiers de staging
    try {
      const oldFiles = await fs.readdir(this.stagingDir);
      for (const file of oldFiles) {
        if (file.endsWith('.md')) {
          await fs.unlink(path.join(this.stagingDir, file));
        }
      }
      console.log(`   ‚úÖ ${oldFiles.length} anciens fichiers nettoy√©s`);
    } catch (e) {
      // Pas grave si le dossier est vide
    }
    
    console.log();
  }

  /**
   * PHASE 2 : G√âN√âRATION
   */
  async generateArticles() {
    console.log('üìù G√âN√âRATION DES ARTICLES\n');
    console.log('‚ïê'.repeat(40));
    
    for (let i = 0; i < this.articles.length; i++) {
      const article = this.articles[i];
      const num = i + 1;
      
      console.log(`\n[${num}/${this.articles.length}] ${article.titre}`);
      console.log(`     Cat√©gorie : ${article.category}`);
      
      try {
        // Option A : Utiliser un corpus existant si disponible
        const existingCorpus = await this.findMatchingCorpus(article);
        
        if (existingCorpus) {
          console.log(`     üìö Corpus existant trouv√© : ${existingCorpus}`);
        } else {
          // Option B : Cr√©er une nouvelle veille
          console.log(`     üì∞ Cr√©ation d'une nouvelle veille...`);
          await this.createVeille(article);
          await this.pause(2000); // Petite pause
        }
        
        // Lancer le pipeline
        console.log(`     ‚öôÔ∏è  G√©n√©ration en cours...`);
        const startGen = Date.now();
        
        const result = await this.runPipeline(article);
        
        const duration = Math.round((Date.now() - startGen) / 1000);
        console.log(`     ‚úÖ Article g√©n√©r√© en ${duration}s`);
        
        // Pr√©parer l'article avec le bon format
        const prepared = await this.formatArticle(result, article);
        
        this.stats.generated++;
        this.stats.results.push({
          success: true,
          article: article,
          file: prepared.filename,
          duration: duration
        });
        
        // Pause entre articles pour √©viter surcharge API
        if (i < this.articles.length - 1) {
          const pauseTime = 15; // secondes
          console.log(`     ‚è∏Ô∏è  Pause de ${pauseTime}s avant le prochain...`);
          await this.pause(pauseTime * 1000);
        }
        
      } catch (error) {
        console.log(`     ‚ùå Erreur : ${error.message}`);
        this.stats.failed++;
        this.stats.results.push({
          success: false,
          article: article,
          error: error.message
        });
        
        // Continuer avec le prochain article
        console.log(`     ‚è≠Ô∏è  Passage √† l'article suivant...`);
        await this.pause(5000);
      }
    }
    
    console.log('\n' + '‚ïê'.repeat(40));
    console.log(`‚úÖ G√©n√©ration termin√©e : ${this.stats.generated}/${this.articles.length} r√©ussis`);
  }

  /**
   * Chercher un corpus existant correspondant
   */
  async findMatchingCorpus(article) {
    try {
      const corpusDir = path.join(this.outputDir, '02-corpus');
      const files = await fs.readdir(corpusDir);
      
      // Chercher un corpus qui pourrait correspondre
      const keywords = article.titre.toLowerCase().split(' ')
        .filter(w => w.length > 4); // Mots significatifs
      
      for (const file of files) {
        const filename = file.toLowerCase();
        const matches = keywords.filter(k => filename.includes(k));
        
        if (matches.length >= 2) { // Au moins 2 mots-cl√©s correspondent
          return file;
        }
      }
      
      return null;
    } catch (e) {
      return null;
    }
  }

  /**
   * Cr√©er une veille pour l'article
   */
  async createVeille(article) {
    const date = new Date().toISOString().split('T')[0];
    const slug = this.slugify(article.titre);
    
    const veilleContent = `# Veille IA - ${article.titre}

Date: ${date}
Cat√©gorie: ${article.category}

## Sujet principal
${article.focus}

## Points cl√©s √† d√©velopper
1. Contexte et enjeux pour les PME fran√ßaises
2. Solutions disponibles sur le march√©
3. Cas d'usage concrets et retours d'exp√©rience
4. M√©thodologie de mise en ≈ìuvre
5. ROI et m√©triques de succ√®s

## Angle √©ditorial
- Ton professionnel mais accessible
- Focus sur l'actionnable et le pratique
- Exemples chiffr√©s et cas r√©els
- √âviter le jargon technique excessif

## Sources √† privil√©gier
- Documentation officielle des outils mentionn√©s
- √âtudes sectorielles r√©centes (2024-2025)
- Retours d'exp√©rience d'entreprises fran√ßaises
- Analyses d'experts reconnus
`;
    
    const veillePath = path.join(
      this.outputDir,
      '01-veille',
      `veille-${slug}-${date}.md`
    );
    
    await fs.writeFile(veillePath, veilleContent, 'utf8');
    return veillePath;
  }

  /**
   * Lancer le pipeline
   */
  async runPipeline(article) {
    return new Promise((resolve, reject) => {
      try {
        // Lancer le pipeline en mode silencieux
        execSync('node pipeline-v4-fixed.cjs', {
          cwd: this.baseDir,
          stdio: 'ignore', // Ignorer les outputs pour √©viter le flood
          encoding: 'utf8'
        });
        
        // R√©cup√©rer le dernier article g√©n√©r√©
        setTimeout(async () => {
          try {
            const finalDir = path.join(this.outputDir, '05-articles-finaux');
            const files = await fs.readdir(finalDir);
            
            if (files.length === 0) {
              reject(new Error('Aucun article g√©n√©r√©'));
              return;
            }
            
            // Prendre le plus r√©cent
            const latest = files.sort().pop();
            const content = await fs.readFile(
              path.join(finalDir, latest),
              'utf8'
            );
            
            resolve({
              filename: latest,
              content: content,
              path: path.join(finalDir, latest)
            });
            
          } catch (e) {
            reject(e);
          }
        }, 2000); // Attendre que le fichier soit √©crit
        
      } catch (error) {
        reject(new Error(`Pipeline error: ${error.message}`));
      }
    });
  }

  /**
   * PHASE 3 : FORMATAGE
   */
  async formatArticle(result, articleConfig) {
    const date = new Date().toISOString().split('T')[0];
    const slug = this.slugify(articleConfig.titre);
    
    // Nettoyer le contenu
    let content = result.content;
    
    // Supprimer l'ancien frontmatter s'il existe
    content = content.replace(/^---[\s\S]*?---\n*/m, '');
    
    // Corriger l'encodage
    content = this.fixEncoding(content);
    
    // Extraire ou g√©n√©rer le titre
    const titleMatch = content.match(/^#\s+(.+)$/m);
    const title = articleConfig.titre;
    
    // Calculer le temps de lecture
    const wordCount = content.split(/\s+/).length;
    const readingTime = Math.ceil(wordCount / 250); // 250 mots/minute
    
    // G√©n√©rer la description
    const description = this.generateDescription(content, articleConfig);
    
    // Cr√©er le frontmatter au format exact du blog
    const frontmatter = `---
title: "${title}"
description: "${description}"
pubDate: ${date}
author: "L'√©quipe Prizm AI"
emoji: "${articleConfig.emoji}"
category: "${articleConfig.category}"
featured: ${this.stats.generated < 3 ? 'true' : 'false'}
readingTime: "${readingTime} min"
---

`;
    
    // Assembler l'article final
    const finalContent = frontmatter + content;
    
    // Sauvegarder dans le staging
    const filename = `${date}-${slug}.md`;
    const stagingPath = path.join(this.stagingDir, filename);
    
    await fs.writeFile(stagingPath, finalContent, 'utf8');
    
    return {
      filename: filename,
      path: stagingPath,
      category: articleConfig.category,
      title: title
    };
  }

  /**
   * PHASE 4 : PUBLICATION
   */
  async prepareForPublishing() {
    console.log('\n\nüì§ PR√âPARATION POUR PUBLICATION\n');
    console.log('‚ïê'.repeat(40));
    
    const successfulArticles = this.stats.results.filter(r => r.success);
    
    if (successfulArticles.length === 0) {
      console.log('   ‚ö†Ô∏è  Aucun article √† publier');
      return;
    }
    
    console.log(`   ${successfulArticles.length} articles pr√™ts √† publier\n`);
    
    // Script de copie vers le blog
    const copyScript = `
# Script de publication des articles
# Ex√©cuter depuis PowerShell

$source = "${this.stagingDir}"
$dest = "${this.blogDir}"

Write-Host "Copie des articles vers le blog..." -ForegroundColor Green

Get-ChildItem -Path $source -Filter "*.md" | ForEach-Object {
    Copy-Item $_.FullName -Destination $dest -Force
    Write-Host "‚úÖ Copi√© : $($_.Name)" -ForegroundColor Cyan
}

Write-Host "\\nTermin√© ! ${successfulArticles.length} articles copi√©s." -ForegroundColor Green
`;
    
    const scriptPath = path.join(this.stagingDir, 'publish-to-blog.ps1');
    await fs.writeFile(scriptPath, copyScript, 'utf8');
    
    console.log('   ‚úÖ Script de publication cr√©√© : publish-to-blog.ps1');
    
    // Instructions
    console.log('\nüìã INSTRUCTIONS DE PUBLICATION :');
    console.log('‚ïê'.repeat(40));
    console.log('\n1. V√âRIFIER LES ARTICLES :');
    console.log(`   cd ${this.stagingDir}`);
    console.log('   # Ouvrir et v√©rifier quelques articles\n');
    
    console.log('2. COPIER VERS LE BLOG :');
    console.log('   .\\publish-to-blog.ps1\n');
    
    console.log('3. TESTER LOCALEMENT :');
    console.log('   cd C:\\Users\\Samuel\\Documents\\prizmia');
    console.log('   npm run dev');
    console.log('   # V√©rifier sur http://localhost:4321\n');
    
    console.log('4. D√âPLOYER :');
    console.log('   git add .');
    console.log(`   git commit -m "Ajout de ${successfulArticles.length} nouveaux articles"`);
    console.log('   git push\n');
    
    console.log('   ‚Üí Netlify d√©ploiera automatiquement !');
  }

  /**
   * RAPPORT FINAL
   */
  async generateReport() {
    const duration = Math.round((Date.now() - this.stats.startTime) / 1000 / 60);
    
    console.log('\n\nüìä RAPPORT FINAL');
    console.log('‚ïê'.repeat(60));
    
    console.log(`\nDur√©e totale : ${duration} minutes`);
    console.log(`Articles g√©n√©r√©s : ${this.stats.generated}/${this.articles.length}`);
    console.log(`√âchecs : ${this.stats.failed}`);
    
    if (this.stats.generated > 0) {
      console.log('\n‚úÖ ARTICLES R√âUSSIS :');
      this.stats.results
        .filter(r => r.success)
        .forEach((r, i) => {
          console.log(`   ${i + 1}. ${r.article.titre}`);
          console.log(`      üìÅ ${r.file}`);
          console.log(`      ‚è±Ô∏è  ${r.duration}s`);
        });
    }
    
    if (this.stats.failed > 0) {
      console.log('\n‚ùå √âCHECS :');
      this.stats.results
        .filter(r => !r.success)
        .forEach(r => {
          console.log(`   - ${r.article.titre}`);
          console.log(`     Erreur : ${r.error}`);
        });
    }
    
    // Sauvegarder le rapport
    const reportPath = path.join(
      this.outputDir,
      '06-rapports',
      `batch-production-${new Date().toISOString().split('T')[0]}.json`
    );
    
    await fs.writeFile(
      reportPath,
      JSON.stringify(this.stats, null, 2),
      'utf8'
    );
    
    console.log(`\nüíæ Rapport sauvegard√© : ${reportPath}`);
    
    // R√©partition par cat√©gorie
    console.log('\nüìä R√âPARTITION PAR CAT√âGORIE :');
    const categories = {};
    this.stats.results
      .filter(r => r.success)
      .forEach(r => {
        const cat = r.article.category;
        categories[cat] = (categories[cat] || 0) + 1;
      });
    
    for (const [cat, count] of Object.entries(categories)) {
      console.log(`   ${cat} : ${count} articles`);
    }
    
    console.log('\n' + '‚ïê'.repeat(60));
    console.log('\nüéâ PRODUCTION BATCH TERMIN√âE AVEC SUCC√àS !');
  }

  /**
   * UTILITAIRES
   */
  
  slugify(text) {
    return text
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/^-+|-+$/g, '')
      .substring(0, 50); // Limiter la longueur
  }

  fixEncoding(text) {
    const replacements = {
      '√É¬©': '√©', '√É¬®': '√®', '√É ': '√†', '√É¬¢': '√¢', '√É¬™': '√™',
      '√É¬¥': '√¥', '√É¬π': '√π', '√É¬ª': '√ª', '√É¬ß': '√ß', '√É¬Æ': '√Æ',
      '√É¬Ø': '√Ø', '√Ö"': '≈ì', '√É‚Ä∞': '√â', '√ÉÀÜ': '√à', '√É‚Ç¨': '√Ä',
      '√¢‚Ç¨‚Ñ¢': "'", '√¢‚Ç¨≈ì': '"', '√¢‚Ç¨': '"', '√¢‚Ç¨¬¶': '...',
      '√¢‚Ç¨"': '‚Äî', '√¢‚Ç¨"': '‚Äì', '√¢‚Äû¬¢': '‚Ñ¢', '√Ç¬©': '¬©'
    };
    
    let fixed = text;
    for (const [bad, good] of Object.entries(replacements)) {
      fixed = fixed.replace(new RegExp(bad, 'g'), good);
    }
    return fixed;
  }

  generateDescription(content, article) {
    // Chercher le premier paragraphe significatif
    const lines = content.split('\n');
    for (const line of lines) {
      const cleaned = line.trim();
      if (cleaned.length > 60 && !cleaned.startsWith('#') && !cleaned.startsWith('*')) {
        return cleaned.substring(0, 150).replace(/[*_`]/g, '') + '...';
      }
    }
    
    // Sinon, utiliser le focus de l'article
    return article.focus.substring(0, 150) + '...';
  }

  pause(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

/**
 * FONCTION PRINCIPALE
 */
async function main() {
  const production = new BatchProductionOptimized();
  
  try {
    console.log('\nüöÄ D√âMARRAGE DE LA PRODUCTION BATCH OPTIMIS√âE');
    console.log('‚ïê'.repeat(60));
    console.log('Syst√®me : Prizm AI');
    console.log('Objectif : 10 articles de qualit√©');
    console.log('Date : ' + new Date().toLocaleDateString('fr-FR'));
    console.log();
    
    await production.run();
    
    console.log('\n‚ú® Production termin√©e avec succ√®s !');
    console.log('\nLes articles sont dans : articles-ready-to-publish/');
    console.log('Suivez les instructions ci-dessus pour publier.');
    
  } catch (error) {
    console.error('\n‚ùå ERREUR FATALE :', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Lancer si ex√©cut√© directement
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { BatchProductionOptimized };